#! /usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2017-2020 Alexis de Lattre <alexis.delattre@akretion.com>

import argparse
import sys
from facturx import generate_facturx_from_file
from facturx.facturx import logger
import logging
from os.path import isfile, isdir, basename

__author__ = "Alexis de Lattre <alexis.delattre@akretion.com>"
__date__ = "March 2021"
__version__ = "0.6"


def main(args):
    if args.log_level:
        log_level = args.log_level.lower()
        log_map = {
            'debug': logging.DEBUG,
            'info': logging.INFO,
            'warn': logging.WARN,
            'error': logging.ERROR,
        }
        if log_level in log_map:
            logger.setLevel(log_map[log_level])
        else:
            logger.error(
                'Wrong value for log level (%s). Possible values: %s',
                log_level, ', '.join(log_map.keys()))
            sys.exit(1)

    pdf_filename = args.regular_pdf_file
    xml_filename = args.facturx_xml
    facturx_pdf_filename = args.facturx_pdf_file
    additional_attachment_filenames = args.optional_attachments
    for filename in [pdf_filename, xml_filename] + additional_attachment_filenames:
        if not isfile(filename):
            logger.error('Argument %s is not a filename', filename)
            sys.exit(1)
    if isdir(facturx_pdf_filename):
        logger.error(
            '3rd argument %s is a directory name (should be a the '
            'Factur-X PDF filename)', facturx_pdf_filename)
        sys.exit(1)
    xml_file = open(xml_filename, 'rb')
    check_xsd = True
    if args.disable_xsd_check:
        check_xsd = False
    pdf_metadata = None
    if (
            args.meta_author or
            args.meta_keywords or
            args.meta_title or
            args.meta_subject):
        pdf_metadata = {
            'author': args.meta_author,
            'keywords': args.meta_keywords,
            'title': args.meta_title,
            'subject': args.meta_subject,
            }
    if isfile(facturx_pdf_filename):
        if args.overwrite:
            logger.warning(
                'File %s already exists. Overwriting it.',
                facturx_pdf_filename)
        else:
            logger.error(
                'File %s already exists. Exit.', facturx_pdf_filename)
            sys.exit(1)
    attachments = {}
    for additional_attachment_filename in additional_attachment_filenames:
        attachments[basename(additional_attachment_filename)] = {
            'filepath': additional_attachment_filename}
    try:
        # The important line of code is below !
        generate_facturx_from_file(
            pdf_filename, xml_file, check_xsd=check_xsd,
            facturx_level=args.facturx_level, pdf_metadata=pdf_metadata,
            output_pdf_file=facturx_pdf_filename, attachments=attachments)
    except Exception as e:
        logger.error('Factur-x lib call failed. Error: %s', e)
        sys.exit(1)


if __name__ == '__main__':
    usage = "facturx-pdfgen <regular_pdf_file> <facturx_xml> "\
            "<facturx_pdf_file> <optional_attachments>"
    epilog = "Author: %s - Version: %s" % (__author__, __version__)
    description = "This script generate a Factur-X PDF invoice from a "\
                  "regular PDF/A invoice and a Factur-X XML file. "\
                  "It can also include additional embedded files in the PDF. "\
                  "To generate a valid PDF/A-3 invoice as requested by the "\
                  "Factur-X standard, you need to give a valid PDF/A "\
                  "regular invoice as input."\
                  "\n\nIf you use one of the --meta-* arguments, you should specify "\
                  "all the meta-* arguments because the default values for "\
                  "metadata only apply if none of the meta-* arguments are used."
    parser = argparse.ArgumentParser(
        usage=usage, epilog=epilog, description=description)
    parser.add_argument(
        '-l', '--log-level', dest='log_level', default='info',
        help="Set log level. Possible values: debug, info, warn, error. "
        "Default value: info.")
    parser.add_argument(
        '-d', '--disable-xsd-check', dest='disable_xsd_check',
        action='store_true',
        help="De-activate XML Schema Definition check on Factur-X XML file "
        "(the check is enabled by default)")
    parser.add_argument(
        '-n', '--facturx-level', dest='facturx_level', default='autodetect',
        help="Specify the Factur-X level of the XML file. "
        "Default: autodetect. If you specify a particular level instead of "
        "using autodetection, you will win a very small amount of time "
        "(less than 1 millisecond). "
        "Possible values: minimum, basicwl, basic, en16931, extended.")
    parser.add_argument(
        '-a', '--meta-author', dest='meta_author',
        help="Specify the author for PDF metadata. Default: use the vendor "
        "name extracted from the Factur-X XML file.")
    parser.add_argument(
        '-k', '--meta-keywords', dest='meta_keywords',
        help="Specify the keywords for PDF metadata. "
        "Default: 'Invoice, Factur-X'.")
    parser.add_argument(
        '-t', '--meta-title', dest='meta_title',
        help="Specify the title of PDF metadata. "
        "Default: generic English title with information extracted from "
        "the Factur-X XML file such as: 'Akretion: Invoice I1242'")
    parser.add_argument(
        '-s', '--meta-subject', dest='meta_subject',
        help="Specify the subject of PDF metadata. "
        "Default: generic English subject with information extracted from the "
        "Factur-X XML file such as: "
        "'Factur-X invoice I1242 dated 2017-08-17 issued by Akretion'")
    parser.add_argument(
        '-w', '--overwrite', dest='overwrite', action='store_true',
        help="Overwrite Factur-X invoice file if it already exists.")
    parser.add_argument("regular_pdf_file", help="Regular PDF invoice")
    parser.add_argument("facturx_xml", help="Factur-X XML file")
    parser.add_argument("facturx_pdf_file", help="Generated Factur-X PDF file")
    parser.add_argument(
        "optional_attachments", nargs='*',
        help="Optional list of additionnal attachments")
    args = parser.parse_args()
    main(args)
